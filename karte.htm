<!doctype html>
<html lang="de">

<head>
    <link rel="stylesheet" href="./ol500/ol.css" type="text/css">
    <style>
        #map {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -100;
        }

        content {
            display: block;
            padding-left: 50px;
            margin-bottom: 200px;
        }

        content div {
            margin-bottom: 100px;
            ;
            height: 200px;
            width: 300px;
            background-color: rgba(50, 50, 50, 0.5);
            /*transform: rotate(10deg);*/
            color: white;
            padding: 10px;
        }

        content div img {
            max-height: 180px;
            max-width: 280px;
        }
    </style>
    <script src="./ol500/ol.js" type="text/javascript"></script>
    <title>OpenLayers example</title>
</head>

<body>
    <canvas id="canvas">ss</canvas>
    <content id="content">
		<div class="kachel" data-time="2018-07-07 13:23:54">Radtour zwischen Lauenburg und Boizenburg</div>
        <div class="kachel" data-time="2018-07-07 13:44:54"><img src="./img/IMG_3118.jpg"></div>
        <div class="kachel" data-time="2018-07-07 14:09:45"><img src="./img/IMG_3120.jpg"></div>
        <div class="kachel" data-time="2018-07-07 14:21:26"><img src="./img/IMG_3121.jpg"></div>
		<div class="kachel" data-time="2018-07-07 14:58:26">Schwanheide</div>
        <div class="kachel" data-time="2018-07-07 16:58:24"><img src="./img/IMG_3130.jpg"></div>
        <div class="kachel" data-time="2018-07-07 17:11:07"><img src="./img/IMG_3131.jpg"></div>
        <div class="kachel" data-time="2018-07-07 17:36:01"><img src="./img/IMG_3144.jpg"></div>
        <div class="kachel" data-time="2018-07-07 18:43:26"><img src="./img/IMG_3159.jpg"></div>
    </content>
    <div id="map" class="map"></div>
    <script type="text/javascript">
        var osm = new ol.layer.Tile({
            source: new ol.source.OSM()

        });


        var bing = new ol.layer.Tile({
            source: new ol.source.BingMaps({
                imagerySet: 'Aerial',
                key: 'AkSukkXMAgxJyAAwb0cW7mU6jHGLF6lpWlLEkomC785njj6PnMMXApTIgJscafjW'
            })
        });


        var styles = {
            'Point': new ol.style.Style({
                image: new ol.style.Circle({
                    radius: 4,
                    fill: new ol.style.Fill({
                        color: 'rgba(180,0,0,0.9)'
                    }),
                    stroke: new ol.style.Stroke({
                        color: 'rgba(255,255,255,0.9)',
                        width: 2
                    })
                })
            }),
            'LineString': new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: '#f00',
                    width: 3
                })
            }),
            'MultiLineString': new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: '#922',
                    width: 2
                })
            })
        };

        var styleFunction = function(feature) {
            return styles[feature.getGeometry().getType()];
        };

        /*var vectorSource = new ol.source.Vector({
                url: "track.gpx",
                format: new ol.format.GPX()
            });
        */
        var vectorSource = new ol.source.Vector();
        var gpx = new ol.layer.Vector({
            source: vectorSource,
            style: styleFunction
        });
        
        var picSource = new ol.source.Vector();
        var pic = new ol.layer.Vector({
            source: picSource,
            style: styleFunction
        });
        
        var view = new ol.View({
            center: ol.proj.fromLonLat([37.41, 8.82]),
            zoom: 4
        });
        var map = new ol.Map({
            target: 'map',
            layers: [osm, gpx, pic],
            controls: [new ol.control.Attribution()],
            interactions: [],
            view: view
        });

        var center = [0,0];
        var geladen = function(e) {

        }
        map.on('resize', geladen);


        window.scrollTo(0, 0);
        var pos_alt = 0;
        var zoom1 = false;
        var zoom2 = false;
        var zoom3 = false;
var maxScroll = Math.max( document.body.scrollHeight, document.body.offsetHeight, document.documentElement.clientHeight, document.documentElement.scrollHeight, document.documentElement.offsetHeight) - window.innerHeight; 
        function wheelRotation(e) {
            var scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            var scrollDiff = scrollTop - pos_alt;
            pos_alt = scrollTop;
            
            // var faktor = Math.round((scrollTop/limit)*10)/10;

            //coord = calcCoord(minTime + diffTime * faktor);
            //makeIcon(coord);
            /*
                       if (!zoom1 && scrollDiff > 0 && scrollTop > 60) {
                           view.animate({zoom: view.getZoom() + 1});
                           zoom1 = true;
                       } else if (zoom1 && scrollDiff < 0 && scrollTop < 60) {
                           view.animate({zoom: view.getZoom() - 1});
                           zoom1 = false;
                       } 
                        if (!zoom2 && scrollDiff > 0 && scrollTop > 120) {
                           view.animate({zoom: view.getZoom() + 1});
                           zoom2 = true;
                       } else if (zoom2 && scrollDiff < 0 && scrollTop < 120) {
                           view.animate({zoom: view.getZoom() - 1});
                           zoom2 = false;
                       } 
                          if (!zoom3 && scrollDiff > 0 && scrollTop > 180) {
                           view.animate({zoom: view.getZoom() + 1});
                           zoom3 = true;
                       } else if (zoom3 && scrollDiff < 0 && scrollTop < 180) {
                           view.animate({zoom: view.getZoom() - 1});
                           zoom3 = false;
                       } 
                       */
                       



            var kacheln = document.getElementsByClassName("kachel");
            var first = true;
            for (var i = 0; i < kacheln.length; i++) {
                var item = kacheln[i];
                if (first & (getOffset(item).top - scrollTop) > -30) {
                    first = false;
                  /*  
                    //console.log(i);
                    //item.style.transform = "rotate(" + Math.floor((Math.random() * 30) -15) + "deg)";
                    var time = Date.parse(item.dataset.time);
                    var timeBefore = minTime;
                    var offsetBefore = 0;
                    if (i > 1) {
                        timeBefore = Date.parse(kacheln[i-1].dataset.time);
                        offsetBefore = getOffset(kacheln[i-1])
                    }
                    var timeDiff = time - timeBefore;
                    var pixel = getOffset(item).top;
                    var pDiff = pixel - offsetBefore;
                    aktTime = (scrollTop - offsetBefore) / pDiff * timeDiff + timeBefore;
                    makeIcon(calcCoord(aktTime));
               */

                    //item.style.backgroundColor = "rgba(200,50,50,0.5)"; 
                    //console.log(item.dataset.time);
                    var pixel1 = [getOffset(item).left + 320, getOffset(item).top - scrollTop + 60];
                    var pixel2 = [getOffset(item).left + 320, getOffset(item).top - scrollTop + 90];
                    var coord = calcCoord(Date.parse(item.dataset.time));
                    makeIcon(coord);
                    if (coord!= null && center != null) {
                        //view.setCenter(coord);
                        if (i == 0) {
                            var extent = gpx.getSource().getExtent();
                map.getView().fit(extent, {
                    padding: [50, 50, 50, 350]
                });
                        } else if(i > 0) {
                            var cV = new ol.View({zoom: 12});
                            const size = /** @type {module:ol/size~Size} */ (map.getSize());
                            cV.centerOn(coord, size, [size[0]/2+100, size[1]/2]);
                            
                            view.animate({zoom: 13, center: cV.getCenter()});
                        }
                        // var pixel2 = map.getPixelFromCoordinate(coord);

                        var pixel_coord1 = map.getCoordinateFromPixel(pixel1);
                        var pixel_coord2 = map.getCoordinateFromPixel(pixel2);
                        makeLine([
                            [pixel_coord1, coord, pixel_coord2, pixel_coord1]
                        ])
                    }
                } else {
                    item.style.backgroundColor = "rgba(50,50,50,0.5)";
                }
            };

            return false;
        }
        document.addEventListener("scroll", wheelRotation, true);


        
        map.on("movestart", function (e) {
            lineLayer.setVisible(false);
        });
        
         map.on("moveend", function (e) {
            lineLayer.setVisible(true);
            wheelRotation(e);
        });

        function getOffset(el) {
            var _x = 0;
            var _y = 0;
            while (el && !isNaN(el.offsetLeft) && !isNaN(el.offsetTop)) {
                _x += el.offsetLeft - el.scrollLeft;
                _y += el.offsetTop - el.scrollTop;
                el = el.offsetParent;
            }
            return {
                top: _y,
                left: _x
            };
        }

        



        var xhr = new XMLHttpRequest();
        xhr.open('GET', './img/2018-07-07.gpx', true);

        // If specified, responseType must be empty string or "document"
        xhr.responseType = 'document';

        // overrideMimeType() can be used to force the response to be parsed as XML
        xhr.overrideMimeType('text/xml');
        var line = new ol.geom.LineString();
        var trackPoints = [];
        var minTime = 0;
        var diffTime = 0;
        var maxTime = 0;
        xhr.onload = function() {
            if (xhr.readyState === xhr.DONE) {
                if (xhr.status === 200) {
                    //console.log(xhr.response);
                    var trkpt = xhr.responseXML.getElementsByTagName("trkpt");

                    Array.prototype.forEach.call(trkpt, function(item) {
                        var coord = new Object();
                        coord.geo = ol.proj.fromLonLat([parseFloat(item.getAttribute("lon")), parseFloat(item.getAttribute("lat"))]);
                        coord.time = Date.parse(item.getElementsByTagName("time")[0].innerHTML);
                        trackPoints.push(coord);
                        line.appendCoordinate(coord.geo);
                    });
                    feature = new ol.Feature();
                    feature.setGeometry(line);
                    vectorSource.addFeature(feature);
                    minTime = trackPoints[0].time;
                    maxTime = trackPoints[trackPoints.length - 1].time
                    diffTime = maxTime - minTime;
                                
                var extent = gpx.getSource().getExtent();
                map.getView().fit(extent, {
                    padding: [50, 50, 50, 350]
                });
                center = map.getPixelFromCoordinate(ol.extent.getCenter(extent));
                console.log(center);

                    //wheelRotation();
                }
            }
        };

        xhr.send(null);


        function calcCoord(time) {
            for (var i = 0; i < trackPoints.length; i++) {
                if (trackPoints[i].time > time) {
                    var d2 = trackPoints[i].time - trackPoints[i - 1].time;
                    var d1 = trackPoints[i].time - time;
                    var f = d1 / d2;
                    dx = trackPoints[i].geo[0] - trackPoints[i - 1].geo[0];
                    dy = trackPoints[i].geo[1] - trackPoints[i - 1].geo[1];
                    x = trackPoints[i].geo[0] + dx * f;
                    y = trackPoints[i].geo[1] + dy * f;
                    return [x, y];
                }
            };
            return [0, 0];
        }




        var lineSource = new ol.source.Vector()
        var lineLayer = new ol.layer.Vector({
            source: lineSource,
            style: new ol.style.Style({
                //              stroke: new ol.style.Stroke({
                //                   color: 'rgba(50,50,50,0.8)',
                //                  width: 3
                //              }),
                fill: new ol.style.Fill({
                    color: 'rgba(50,50,50,0.5)'
                })
            })

        });
        var line2 = new ol.Feature();
        var lineGeo = new ol.geom.Polygon([
            [
                [0, 0]
            ]
        ]);
        line2.setGeometry(lineGeo);
        lineSource.addFeature(line2);
        map.addLayer(lineLayer);

        function makeLine(coord) {
            //console.log(coord);
            lineGeo.setCoordinates(coord);
            //map.getView().setCenter(coord);
        }


        var markerSource = new ol.source.Vector()
        var markerLayer = new ol.layer.Vector({
            source: markerSource,
            style: new ol.style.Style({
                image: new ol.style.Circle({
                    radius: 6,
                    fill: new ol.style.Fill({
                        color: 'rgba(0,180,0,0.9)'
                    }),
                    stroke: new ol.style.Stroke({
                        color: 'rgba(255,255,255,0.9)',
                        width: 2
                    })
                })
            })
        });
        var marker = new ol.Feature();
        var markerGeo = new ol.geom.Point([0, 0]);
        marker.setGeometry(markerGeo);
        markerSource.addFeature(marker);
        map.addLayer(markerLayer);

        function makeIcon(coord) {
            markerGeo.setCoordinates(coord);
        }
        
        
        var kacheln = document.getElementsByClassName("kachel");
        Array.prototype.forEach.call(kacheln, function(item) {
            //item.style.transform = "rotate(" + Math.floor((Math.random() * 30) -15) + "deg)";
            var coord1 = calcCoord(Date.parse(item.dataset.time));
            var m = new ol.Feature();
            var mg = new ol.geom.Point(coord1);
            console.log(mg);
            m.setGeometry(mg);
            picSource.addFeature(m);
        });
        console.log(pic);
    </script>
</body>

</html>
